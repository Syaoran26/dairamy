// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  clerkUserId String   @unique
  email       String   @unique
  name        String
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  collections  Collection[]
  entries      Entry[]
  currentDraft Draft?
}

model Collection {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  entries Entry[]

  @@unique([userId, name])
}

model Entry {
  id           String   @id @default(cuid())
  collectionId String?
  userId       String
  title        String
  content      String   @db.Text
  mood         String
  moodScore    Int
  moodImage    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  collection Collection? @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Draft {
  id        String   @id @default(cuid())
  userId    String   @unique
  title     String
  content   String   @db.Text
  mood      String
  moodScore Int
  moodImage String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
